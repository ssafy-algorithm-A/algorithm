package 백준_스터디;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.util.Queue;
public class 백준_원판돌리기_17822 {
	private static final String Queue = null;
	static int N,M,T;
	static int [][]Circle, Test, dir = {{1,0},{-1,0},{0,1},{0,-1}}; //돌림판이다
	static boolean [][]visit;
	static boolean exist; //중복의 존재여부를 판단
	static class point{ 
		int row, col;
		point(int row, int col){
			this.row = row;
			this.col = col;
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); //원판의 개수
		M = Integer.parseInt(st.nextToken()); //원판안의 숫자 개수
		T = Integer.parseInt(st.nextToken()); //테스트 횟수
		//돌림판을 행만큼이 원판의 개수이며 열들이 원판안의 숫자들이다.
		Circle = new int[N][M];
		Test = new int[T][3];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				//원판안의 숫자는 위 -> 오른쪽 -> 아래 -> 왼쪽 순서로 입력되어 들어간다.
				Circle[i][j] = Integer.parseInt(st.nextToken());
				//시계방향이라면  오른쪽방향으로 배열원소들을 밀고 반시게는 왼쪽으로 밀어준다.
			}
		}// end of for
		
		for (int i = 0; i < T; i++) {
			//돌릴 번호판 , 회전방향, 회전횟수 -- 순서대로 입력
			st = new StringTokenizer(br.readLine());
			int number = Integer.parseInt(st.nextToken());
			int dir = Integer.parseInt(st.nextToken());
			int dirNum = Integer.parseInt(st.nextToken());
			
			Rotate(number, dir, dirNum);
		}
		int sum = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				sum += Circle[i][j];
			}
		}

		System.out.println(sum);
	}
	//회전 시켜주는 함수이다.
	static void Rotate(int number, int dir, int dirNum) {
		
		//번호판 전체를 돌며 dir에 따라 돌려준다.
		//number의 배수들은 모두 돌아야 한다.
		int x = number;
		dirNum = dirNum % M;
		while(number <= N) {
			int index = 0;
			int []copy = new int[M];
			//회전을 시켜준다.
			
			for (int cnt = 0; cnt < M; cnt++) {
				int i = 0;
				if(dir == 0) { //시계방향
					i = index+dirNum;
					if(i > M-1) i -= M; //옮길 위치가 범위를 벗어나면 그에 맞추어 자리를 찾게 해준다.
				}
				else { //반시계 방향
					i = index-dirNum;
					if(i < 0) i += M;
				}
				copy[i] = Circle[number-1][index];
				index ++; //회전 횟수만큼 넣어준다.
			}

			for (int i = 0; i < copy.length; i++) {
				Circle[number-1][i] = copy[i]; //옮겨준 위치들 복사
			}
			number += x; //배수만큼 증가시켜준다.
		}
		
		int sum = 0;
		int cnt = 0;
		exist = false; //중복하는 경우가 아예없는지 판단해준다.
		visit = new boolean[N][M];
		for (int i = 0; i < Circle.length; i++) {
			for (int j = 0; j < Circle[i].length; j++) {
				//방문하지 않은 판이라면 돌려준다.
				if(Circle[i][j] != 0) {
					sum += Circle[i][j]; //중복이 없는경우를 대비하여 총 합을 구해준다.
					cnt++;
				}
				if(!visit[i][j] && Circle[i][j] != 0) sameCheck(new point(i,j)); //이제 인접한 숫자들을 제거해 나간다.
			}
		}

		if(cnt == 0) return;
		if(!exist) { //만약 중복되는 경우가 하나도 없는 경우
			//평균을 구하여 그보다 작은건 1더해주고 큰건 1빼준다.
			for (int i = 0; i < Circle.length; i++) {
				for (int j = 0; j < Circle[i].length; j++) {
					if(Circle[i][j] > (double)sum/cnt) Circle[i][j]--;
					else if(Circle[i][j] < (double)sum/cnt && Circle[i][j] != 0) Circle[i][j]++;
				}
			}
		}

	}
	//같은 인접 숫자들을 확인해주는 함수이다. BFS를 이용하여 근접한 배열에 존재하는 녀석들을 모두 0으로 바꿔준다.
	static void sameCheck(point p) {
		
		Queue<point> queue = new LinkedList();
		queue.offer(p);
		visit[p.row][p.col] = true;
		int standard = Circle[p.row][p.col]; //기준이 되는 숫자를 기록
		while(!queue.isEmpty()) {
			point temp = queue.poll();
			for (int i = 0; i < dir.length; i++) {
				int row = temp.row + dir[i][0];
				int col = temp.col + dir[i][1];
				if(col < 0) col = M-1;
				if(col > M-1) col = 0;
				if(check(row, col, standard) &&!visit[row][col]) { //여기로 들어온다는건 같은게 하나라도 더 있다는 것이기 때문에
					Circle[p.row][p.col] = 0; //처음에 기준이되는 좌표도 0으로 만들어준다.
					visit[row][col] = true;
					queue.offer(new point(row, col));
					Circle[row][col] = 0;
					exist = true;
				}
			}
		}//end of while
	}
	static boolean check(int row, int col, int standard) {
		if(row < 0 ||row > N-1) return false;
		else if(Circle[row][col] != standard) return false; //기준 숫자와 달라도 탈락
		else if(Circle[row][col] == 0) return false;
		else return true;
	}
}
